services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - supplychain_net
    healthcheck:
      test: ["CMD", "nc", "-z", "zookeeper", "2181"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    networks:
      - supplychain_net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=supplychaindb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/initdb/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - supplychain_net
    restart: always

  redis:
    image: redis:6
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - supplychain_net
    restart: always

  api:
    build: ./api
    container_name: fastapi
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - kafka
    env_file:
      - .env
    networks:
      - supplychain_net
    extra_hosts:
      - "localhost:host-gateway"
    restart: always

  ingestion:
    build: ./ingestion
    container_name: ingestion
    env_file:
      - .env
    depends_on:
      - kafka
      - postgres
    networks:
      - supplychain_net
    restart: always

  frontend:
    build:
      context: ./supply-chain-dashboard
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80" # Map port 3000 on the host to port 80 in the container
    depends_on:
      - api
    networks:
      - supplychain_net
    restart: always

networks:
  supplychain_net:
    driver: bridge

volumes:
  kafka_data:
  postgres_data:
