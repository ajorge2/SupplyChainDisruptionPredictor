services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    volumes:
      - kafka_data:/bitnami

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "8080:8080"
      - "7077:7077"
    depends_on:
      - kafka

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=supplychaindb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:6
    container_name: redis
    ports:
      - "6379:6379"

  # FastAPI Service
  api:
    build: ./api
    container_name: fastapi
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - kafka
    env_file:
      - .env

  # Ingestion Service
  ingestion:
    build: ./ingestion
    container_name: ingestion
    depends_on:
      - kafka
    env_file:
      - .env
    # Remove or comment out Datadog labels
    # labels:
    #   - "com.datadoghq.ad.logs=true"
    #   - "com.datadoghq.ad.logs.source=ingestion"
    #   - "com.datadoghq.ad.logs.service=ingestion"

  # Frontend Dashboard
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    depends_on:
      - api
    env_file:
      - .env

  # Datadog Agent (Remove or Comment Out)
  # datadog:
  #   image: datadog/agent:latest
  #   container_name: datadog
  #   environment:
  #     - DD_API_KEY=your_datadog_api_key
  #     - DD_SITE=datadoghq.com
  #     - DD_DOGSTATSD_PORT=8125
  #     - DD_APM_ENABLED=true
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /proc/:/host/proc/:ro
  #     - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro

  # ML Service
  ml:
    build: ./ml
    container_name: ml
    depends_on:
      - postgres
      - redis
      - kafka
    env_file:
      - .env
    volumes:
      - ./ml:/app
    command: python train_model.py

networks:
  supplychain_net:
    driver: bridge

volumes:
  kafka_data:
  postgres_data:
